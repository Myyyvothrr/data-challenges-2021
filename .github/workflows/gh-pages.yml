name: GH Pages

on: [push]

jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      - name: create public folder
        run: |
          mkdir public


      - name: Repo Visualizer
        uses: githubocto/repo-visualizer@main
        with:
          # A path (relative to the root of your repo) to where you would like the diagram to live. For example: images/diagram.svg. Default: diagram.svg
          output_file: "public/RepoVisualization.svg"
          # A list of paths to exclude from the diagram, separated by commas. For example: dist,node_modules
          excluded_paths: "ignore"
          # excluded_paths: # optional
          # A list of micromatch globs to exclude from the diagram, separated by semicolons. For example: **/*.png;docs/**/*.{png,ico}
          # excluded_globs: # optional
          # The directory (and its children) that you want to visualize in the diagram. Default: "" (repository root directory)
          # root_path: # optional
          # The maximum number of nested folders to show files within. Default: 9
          # max_depth: # optional
          # The commit message to use when updating the diagram. Default: Repo visualizer: updated diagram
          # commit_message: # optional
          # The branch name to push the diagram to (branch will be created if it does not yet exist). For example: diagram
          # branch: gh-pages
          # Whether to push the new commit back to the repository. Must be true or false. Default: true
          should_push: false # optional, default is true
          # If given, the name of an artifact to be created containing the diagram. Default: don't create an artifact.
          # artifact_name: # optional, default is ''


      # - name: Qodana - Code Quality
      #   # # https://github.com/marketplace/actions/qodana-linters
      #   # # currently only for jvm
      #   # uses: JetBrains/qodana-action@v3.2.1
      #   # uses: JetBrains/qodana-action-eap@v1.1.2-eap
      #   uses: JetBrains/qodana-action-eap@main
      #   continue-on-error: true # exits with "exit 255" if fail-threshold is reached https://www.jetbrains.com/help/qodana/qodana-sarif-output.html
      #   with:
      #     # Qodana Linter. Possible values: qodana-jvm, qodana-php and qodana-python
      #     linter: qodana-python
      #     #   Project folder to inspect (default ${{ github.workspace }})
      #     # project-dir:
      #     #   Save results to folder (default ${{ github.workspace }}/qodana)
      #     results-dir: ${{ github.workspace }}/qodana
      #     # results-dir: ${{ github.workspace }}/public/qodana
      #     #   Save cache to folder (default /home/runner/work/_temp/_github_home/qodana-cache)
      #     # cache-dir:
      #     #   Directory to be inspected. If not specified, the whole project is inspected by default
      #     # inspected-dir:
      #     #   Run in baseline mode. Provide the path to an exisitng SARIF report to be used in the baseline state calculation
      #     # baseline:
      #     #   Include in the output report the results from the baseline run that are absent in the current run (default false)
      #     # baseline-include-absent:
      #     #   Set the number of problems that will serve as a quality gate. If this number is reached, the inspection run is terminated
      #     fail-threshold: 10
      #     #   Generate HTML report (default false)
      #     save-html-report: true
      #     #   Name of a profile defined in project
      #     # profile-name:
      #     #   Absolute path to the profile file
      #     # profile-path:
      #     #   Provide path to gradle.properties file (for example: /your/custom/path/gradle.properties)
      #     # gradle-settings-path:
      #     #   Additional volumes to mount to qodana docker image
      #     # additional-volumes:
      #     #   Additional environment variables to pass to qodana docker image
      #     # additional-env-variables:


      - name: Copy data to publish
        run: |
          # mkdir public
          cp _config.yml public/ || true  # jekyll config file
          # cp data/*.html public/ || true
          # cp data/*.js public/ || true
          # cp -r ${{ github.workspace }}/qodana public/ || true
          # rsync -avm results/ public/ --exclude=*.7z --exclude=*.zip --exclude=*.parquet --exclude=*.np* # copies the content of the folder results into public
          rsync -avm results public/ --exclude=*.7z --exclude=*.zip --exclude=*.parquet --exclude=*.np* # copies the folder results into public
          rsync -avm . public/ --exclude=results/ --exclude=qodana/ --include=*/ --include=*.md --include=*.html --exclude=*/ --exclude=*
          # <=>
          # rsync -avm . public/ --exclude=*.7z --exclude=*.zip --exclude=*.parquet --include=results/** --include=*/ --include=*.md --exclude=*/ --exclude=*


      - name: Prepare data to publish
        shell: python
        run: |
          from pathlib import Path
          from textwrap import dedent
          import re
          import subprocess
          import shlex

          pages_root = Path("public")
          # print(pages_root, pages_root.exists())
          # print(*[p for p in pages_root.glob("**/*")], "", sep = "\n")
          path_results = pages_root.joinpath("results")
          path_ppr = path_results.joinpath("PandasProfileReport")
          # print(path_ppr, path_ppr.exists())
          # print(*[p for p in path_ppr.glob("**/*")], "", sep = "\n")
          htmls = sorted(path_ppr.glob("**/*.html"))
          htmls_p = htmls
          htmls = [p.relative_to(path_ppr).as_posix() for p in htmls]

          # Update the list of htmls in README.md
          md = path_ppr.joinpath("README.md")
          with open(md, "a+") as f:
              f.write("\n# Pandas Profiling Reports\n\n")
              for link in [f'- [{p}]({p}) ({pp.stat().st_size >> 20} MB)\n' for p, pp in zip(htmls, htmls_p)]:
                  f.write(link)

          # Update the list of htmls in html compare view
          vs = path_ppr.joinpath("A-B-side-by-side.html")
          # TODO: put marker in HTML file => replace the marker with content
          match_start = re.search("[\s\S]*makeDropdown\(document\.get.*?\[", vs.read_text())
          match_end = re.search("\]\);[\s\S]*", vs.read_text()[match_start.end():])
          with open(vs, "a+") as f:
              f.write(match_start.group() + "\n")
              f.write("".join([f'["{p}", "{p} ({pp.stat().st_size >> 20} MB)"],\n' for p, pp in zip(htmls, htmls_p)]))
              f.write(match_end.group())

          # compress PNGs
          # Preinstalled available in GitHub Actions: https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          path_vis = path_results.joinpath("vis")
          # path_vis_ims = path_vis.glob("**/*.png")
          # for im in path_vis_ims:
          #     subprocess.run(shlex.split(f'convert {im.as_posix()} -resize-quality 80% {im.with_suffix(".jpg").as_posix()}'))
          subprocess.run(shlex.split(f'mogrify -quality 80 -resize "600x600>" -format jpg *.png'), cwd = path_vis.as_posix())
          md = path_vis.joinpath("README.md")
          # md_text = md.read_text()
          # md.write_text(re.sub(r"(!\[\]\()(.*?)(\.png\))", r"[\1\2.jpg)](\2\3", md_text))
          md.write_text(re.sub(r"(!\[\]\()(.*?)(\.png\))", r"[\1\2.jpg)](\2\3", md.read_text()))

          # Create md in root directory
          # Add RepoVisualization.svg to README.md
          with open(pages_root.joinpath("README.md"), "a+") as f:
              # f.write("\n\n# PhysioNet Data Challenge\n\n")
              f.write("\n## Sitemap Markdowns\n\n")
              mds = sorted([p.relative_to(pages_root).as_posix() for p in pages_root.glob("**/*.md")])
              for link in (f'- [{p}]({p})\n' for p in mds):
                  f.write(link)
              f.write("\n## Sitemap HTMLs\n\n")
              # htmls = sorted([p.relative_to(pages_root).as_posix() for p in pages_root.glob("**/*.html")])
              # for link in (f'- [{p}]({p})\n' for p in htmls):
              #     f.write(link)
              htmls = [p for p in pages_root.glob("**/*.html")]
              htmls = sorted(htmls + list(set([x.parent for x in htmls])))
              base_dir = ""
              for link in htmls:
                  if link.is_dir():
                      base_dir = link
                      f.write(f'- {link.relative_to(pages_root).as_posix()}\n')
                  else:
                      f.write(f'\t- [{link.relative_to(base_dir).stem}]({link.relative_to(pages_root)})\n')
              if f.read().find("RepoVisualization.svg") == -1:
                  f.write("\n## Repo Visualizer\n\n![Repo Visualization](RepoVisualization.svg)\n")

          # # Add Sitemap
          # # with open(pages_root.joinpath("sitemap.html"), "w+") as f:
          #     # f.write("\n## Sitemap\n\n")
          #     f.write(dedent("""
          #       {% for cat in site.category-list %}
          #       ### {{ cat }}
          #       <ul>
          #         {% for page in site.pages %}
          #           {% if page.resource == true %}
          #             {% for pc in page.categories %}
          #               {% if pc == cat %}
          #                 <li><a href="{{ page.url }}">{{ page.title }}</a></li>
          #               {% endif %}   <!-- cat-match-p -->
          #             {% endfor %}  <!-- page-category -->
          #           {% endif %}   <!-- resource-p -->
          #         {% endfor %}  <!-- page -->
          #       </ul>
          #       {% endfor %}  <!-- cat -->
          #     """))
          #     f.write(dedent("""
          #       <ul>
          #           {% for page in site.pages %}
          #               <li><a href="{{ page.url }}">{{ page.title }}</a></li>
          #           {% endfor %}
          #       </ul>
          #     """))
          #     f.write(dedent("""
          #       {% for page in site.pages %}
          #           - [{{ page.title }}]({{ page.url }})
          #       {% endfor %}
          #     """))


      - name: Deploy to GitHub Pages
        # You may pin to the exact commit or the version.
        # uses: JamesIves/github-pages-deploy-action@6ce741f5d4e01e15f9ea5ec96df1a43f522c330f
        uses: JamesIves/github-pages-deploy-action@4.1.7
        with:
          # This option allows you to define a private SSH key to be used in conjunction with a repository deployment key to deploy using SSH. The private key should be stored in the `secrets / with` menu **as a secret**. The public should be stored in the repositories deployment keys menu and be given write access.
          # Alternatively you can set this field to `true` to enable SSH endpoints for deployment without configuring the ssh client. This can be useful if you've already setup the SSH client using another package or action in a previous step.

#           ssh-key: # optional
          # This option defaults to the repository scoped GitHub Token.  However if you need more permissions for things such as deploying to another repository, you can add a Personal Access Token (PAT) here.  This should be stored in the `secrets / with` menu **as a secret**.
          # We recommend using a service account with the least permissions neccersary and when generating a new PAT that you select the least permission scopes required.
          # [Learn more about creating and using encrypted secrets here.](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)

#           token: # optional, default is ${{ github.token }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: gh-pages
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: public
          # If you would like to push the contents of the deployment folder into a specific directory on the deployment branch you can specify it here.
#           target-folder: # optional
          # If you need to customize the commit message for an integration you can do so.
#           commit-message: # optional
          # If your project generates hashed files on build you can use this option to automatically delete them from the target folder on the deployment branch with each deploy. This option is on by default and can be toggled off by setting it to false.
#           clean: # optional, default is true
          # If you need to use clean but you would like to preserve certain files or folders you can use this option. This should contain each pattern as a single line in a multiline string.
#           clean-exclude: # optional
          # Do not actually push back, but use `--dry-run` on `git push` invocations insead.
#           dry-run: # optional
          # Allows you to customize the name that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the name in the GitHub context, followed by the name of the action.
#           git-config-name: # optional
          # Allows you to customize the email that is attached to the GitHub config which is used when pushing the deployment commits. If this is not included it will use the email in the GitHub context, followed by a generic noreply GitHub email.
#           git-config-email: # optional
          # Allows you to specify a different repository path so long as you have permissions to push to it. This should be formatted like so: JamesIves/github-pages-deploy-action
#           repository-name: # optional
          # This should point to where your project lives on the virtual machine. The GitHub Actions environment will set this for you. It is only neccersary to set this variable if you're using the node module.
#           workspace: # optional
          # This option can be used if you'd prefer to have a single commit on the deployment branch instead of maintaining the full history.
#           single-commit: # optional
          # Silences the action output preventing it from displaying git messages.
#           silent: # optional
